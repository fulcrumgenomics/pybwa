name: tests

on:
  push:
    branches:
      - "**"
    tags:
      - "!**"
  workflow_call:

env:
  POETRY_VERSION: 2.1.1
  CYTHON_TRACE: 1  # for code coverage

jobs:
  testing:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        PYTHON_VERSION: ["3.9", "3.10", "3.11", "3.12"]
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'true'
    - name: Set up Python ${{matrix.PYTHON_VERSION}}
      uses: actions/setup-python@v1
      with:
        python-version: ${{matrix.PYTHON_VERSION}}

    - name: Get full Python version
      id: full-python-version
      shell: bash
      run: |
        echo "version="$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))") >> $GITHUB_OUTPUT;

    - name: Install poetry
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install poetry==${{env.POETRY_VERSION}}

    - name: Configure poetry
      shell: bash
      run: poetry config virtualenvs.in-project true

    - name: Set up cache
      uses: actions/cache@v4
      id: cache
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Ensure cache is healthy
      if: steps.cache.outputs.cache-hit == 'true'
      shell: bash
      run: poetry run pip --version >/dev/null 2>&1 || rm -rf .venv

    - name: Check that the lock file is up to date
      shell: bash
      run: |
        poetry check

    - name: Install dependencies
      shell: bash
      run: poetry install --no-interaction --no-root

    - name: Install pybwa
      uses: nick-fields/retry@v3
      with:
        shell: bash
        max_attempts: 2
        retry_on: error
        polling_interval_seconds: 5
        timeout_minutes: 90
        command: |
          poetry install --no-interaction
          poetry run python -c "import pybwa"
        on_retry_command: |
          echo "BUILD_EXTENSIONS_PARALLEL=false" >> $GITHUB_ENV
          export "BUILD_EXTENSIONS_PARALLEL=false"

    - name: Style checking
      shell: bash
      run: |
        poetry run ruff format --check pybwa tests

    - name: Run lint
      shell: bash
      run: |
        poetry run ruff check pybwa tests

    - name: Run mypy
      shell: bash
      run: |
        poetry run mypy pybwa tests --config=pyproject.toml

    - name: Run pytest
      shell: bash
      run: |
        poetry run python -m pytest --cov=pybwa --cov-report=xml --cov-branch

    - name: Run docs
      shell: bash
      run: |
        set -euo pipefail
        cd docs
        poetry run make html

    - name: Upload code coverage
      uses: codecov/codecov-action@v4.5.0
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Find memory leaks
      shell: bash
      run: |
        apt update -y && apt upgrade -y && apt install -y build-essential valgrind;
        bash valgrind.sh;
      env:
        INPUT_TRACK_FILE_DESCRIPTORS: true
        INPUT_TREAT_ERROR_AS_WARNING: false
        INPUT_VALGRIND_SUPPRESSIONS: ""
        INPUT_VERBOSE: true
        HOME: ${{ GITHUB_WORKSPACE }}
